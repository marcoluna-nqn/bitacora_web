import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';

import '../workers/json_worker.dart';
import '../services/sheet_store.dart';
import '../services/export_xlsx_service.dart';
import '../widgets/glass_appbar.dart';
import '../widgets/floating_icons.dart';
import 'editor_screen.dart';

class StartPage extends StatefulWidget {
  const StartPage({super.key, required this.isLight, required this.onToggleTheme});
  final bool isLight;
  final VoidCallback onToggleTheme;

  @override
  State<StartPage> createState() => _StartPageState();
}

class _StartPageState extends State<StartPage> {
  List<SheetMeta> _items = [];
  String _q = '';

  @override
  void initState() {
    super.initState();
    _reload();
  }

  void _reload() => setState(() => _items = SheetStore.list());

  Future<void> _newSheet() async {
    final id = SheetStore.createNew();
    _reload();
    if (!mounted) return;
    await Navigator.push(context, _NoAnimRoute(child: EditorScreen(
      isLight: widget.isLight, onToggleTheme: widget.onToggleTheme, sheetId: id,
    )));
    _reload();
  }

  Future<void> _rename(SheetMeta m) async {
    final t = TextEditingController(text: m.title);
    final name = await showDialog<String>(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Renombrar planilla'),
        content: TextField(controller: t, decoration: const InputDecoration(labelText: 'Título')),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context, null), child: const Text('Cancelar')),
          FilledButton(onPressed: () => Navigator.pop(context, t.text.trim()), child: const Text('Guardar')),
        ],
      ),
    );
    if (!mounted) return;
    if (name != null) {
      SheetStore.rename(m.id, name);
      _reload();
    }
  }

  String _fmt(DateTime d) {
    final now = DateTime.now();
    final diff = now.difference(d);
    if (diff.inMinutes < 1) return 'justo ahora';
    if (diff.inMinutes < 60) return ' min';
    if (diff.inHours < 24) return ' h';
    return '\/\ '
           '\:\';
  }

  Future<void> _exportSheet(SheetMeta m) async {
    final raw = SheetStore.loadRaw(m.id);
    if (raw == null) return;
    final parsed = await JsonWorker.parseOnce(raw);
    final name = _sanitizeFileName(m.title.isEmpty ? 'bitacora' : m.title);
    await ExportXlsxService.download(
      fileName: '\.xlsx',
      headers: parsed.headers,
      rows: parsed.rows,
    );
  }

  String _sanitizeFileName(String s) {
    final r = RegExp(r'[\\/:*?"<>|]+');
    final cleaned = s.trim().replaceAll(r, '_');
    return cleaned.isEmpty ? 'bitacora' : cleaned;
  }

  @override
  Widget build(BuildContext context) {
    final filtered = _q.isEmpty
        ? _items
        : _items.where((e) => (e.title.isEmpty ? 'Planilla' : e.title).toLowerCase().contains(_q.toLowerCase())).toList();
    final isLightTheme = Theme.of(context).brightness == Brightness.light;

    return Stack(
      children: [
        const FloatingIconsLayer(),
        Scaffold(
          extendBodyBehindAppBar: true,
          appBar: AppBar(
            title: const Text('Bitácora Web'),
            flexibleSpace: GlassAppBarBackground(isLight: isLightTheme),
            actions: [
              IconButton(
                tooltip: isLightTheme ? 'Cambiar a oscuro' : 'Cambiar a claro',
                onPressed: widget.onToggleTheme,
                icon: Icon(isLightTheme ? Icons.dark_mode : Icons.light_mode),
              ),
            ],
          ),
          body: SafeArea(
            child: Center(
              child: ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 900),
                child: ListView(
                  padding: const EdgeInsets.fromLTRB(16,16,16,100),
                  children: [
                    Container(
                      padding: const EdgeInsets.all(18),
                      decoration: BoxDecoration(
                        color: Theme.of(context).cardColor.withValues(alpha: 0.9),
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(color: Theme.of(context).dividerColor.withValues(alpha: 0.8)),
                        boxShadow: [
                          if (Theme.of(context).brightness == Brightness.light)
                            const BoxShadow(blurRadius: 20, offset: Offset(0,10), color: Color(0x15000000)),
                        ],
                      ),
                      child: Row(
                        children: [
                          const Icon(Icons.table_chart, size: 28),
                          const SizedBox(width: 10),
                          const Expanded(child: Text('Tus planillas, en un solo lugar',
                            style: TextStyle(fontWeight: FontWeight.w800, fontSize: 18))),
                          FilledButton.icon(onPressed: _newSheet, icon: const Icon(Icons.add), label: const Text('Nueva planilla')),
                        ],
                      ),
                    ).animate().fadeIn(duration: 320.ms).move(begin: const Offset(0,16), curve: Curves.easeOut),
                    const SizedBox(height: 14),
                    TextField(
                      onChanged: (v) => setState(() => _q = v),
                      decoration: const InputDecoration(prefixIcon: Icon(Icons.search), hintText: 'Buscar planilla…'),
                    ).animate().fadeIn(duration: 280.ms, delay: 60.ms).move(begin: const Offset(0,10), curve: Curves.easeOut),
                    const SizedBox(height: 14),
                    ...List.generate(filtered.length, (i) {
                      final m = filtered[i];
                      final card = Dismissible(
                        key: ValueKey(m.id),
                        direction: DismissDirection.endToStart,
                        background: Container(
                          alignment: Alignment.centerRight,
                          padding: const EdgeInsets.only(right: 16),
                          color: Theme.of(context).colorScheme.errorContainer,
                          child: Icon(Icons.delete, color: Theme.of(context).colorScheme.onErrorContainer),
                        ),
                        confirmDismiss: (_) async {
                          final ok = await showDialog<bool>(
                            context: context,
                            builder: (_) => AlertDialog(
                              title: const Text('Eliminar'),
                              content: const Text('¿Eliminar esta planilla? Esta acción no se puede deshacer.'),
                              actions: [
                                TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('Cancelar')),
                                FilledButton(onPressed: () => Navigator.pop(context, true), child: const Text('Eliminar')),
                              ],
                            ),
                          );
                          return ok ?? false;
                        },
                        onDismissed: (_) { SheetStore.delete(m.id); _reload(); },
                        child: Card(
                          elevation: 0,
                          clipBehavior: Clip.antiAlias,
                          child: InkWell(
                            onTap: () async {
                              await Navigator.push(context, _NoAnimRoute(child: EditorScreen(
                                isLight: widget.isLight, onToggleTheme: widget.onToggleTheme, sheetId: m.id,
                              )));
                              _reload();
                            },
                            child: Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 12),
                              child: Row(
                                children: [
                                  const Icon(Icons.description_outlined),
                                  const SizedBox(width: 12),
                                  Expanded(child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(m.title.isEmpty ? 'Planilla sin título' : m.title,
                                          style: const TextStyle(fontWeight: FontWeight.w700),
                                          overflow: TextOverflow.ellipsis),
                                      const SizedBox(height: 2),
                                      Text('\ filas · \',
                                          style: Theme.of(context).textTheme.bodySmall),
                                    ],
                                  )),
                                  IconButton(tooltip: 'Exportar XLSX', onPressed: () => _exportSheet(m), icon: const Icon(Icons.table_view)),
                                  IconButton(tooltip: 'Renombrar', onPressed: () => _rename(m), icon: const Icon(Icons.edit_note)),
                                  IconButton(tooltip: 'Abrir', onPressed: () async {
                                    await Navigator.push(context, _NoAnimRoute(child: EditorScreen(
                                      isLight: widget.isLight, onToggleTheme: widget.onToggleTheme, sheetId: m.id,
                                    ))); _reload();
                                  }, icon: const Icon(Icons.arrow_forward)),
                                ],
                              ),
                            ),
                          ),
                        ),
                      );
                      return card
                        .animate(delay: (80 + i * 40).ms)
                        .fadeIn(duration: 260.ms)
                        .move(begin: const Offset(0,10), curve: Curves.easeOut);
                    }),
                    if (filtered.isEmpty)
                      Padding(
                        padding: const EdgeInsets.only(top: 24),
                        child: Center(child: Text('No hay planillas. Crea una nueva.',
                          style: Theme.of(context).textTheme.bodyMedium)),
                      ).animate().fadeIn(duration: 240.ms),
                  ],
                ),
              ),
            ),
          ),
          floatingActionButton: FloatingActionButton.extended(
            onPressed: _newSheet, label: const Text('Nueva'), icon: const Icon(Icons.add),
          ).animate().fadeIn(duration: 280.ms, delay: 120.ms).scale(begin: const Offset(0.9,0.9), curve: Curves.easeOutBack),
        ),
      ],
    );
  }
}

class _NoAnimRoute extends PageRouteBuilder {
  _NoAnimRoute({required Widget child})
      : super(pageBuilder: (_, __, ___) => child, transitionDuration: Duration.zero, reverseTransitionDuration: Duration.zero);
}
